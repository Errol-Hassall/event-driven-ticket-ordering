{
  "version": 3,
  "sources": ["../../stacks/Lambda.ts", "../../stacks/index.ts"],
  "sourcesContent": ["import {\n  StackContext,\n  Api,\n  EventBus,\n  Table,\n  Function,\n} from \"@serverless-stack/resources\";\nimport { EVENT_DETAIL_TYPE, EVENT_SOURCE } from \"../services/types/events\";\n\nexport function Lambda({ stack }: StackContext) {\n  const table = new Table(stack, \"Orders\", {\n    fields: {\n      customerId: \"string\",\n    },\n    primaryIndex: { partitionKey: \"customerId\" },\n    stream: true,\n    consumers: {\n      consumer: \"functions/updateAvailability.handler\",\n    },\n  });\n\n  console.log(\"TABLE NAME\", table.tableName);\n\n  new Function(stack, \"databaseFunction\", {\n    handler: \"functions/processOrder.handler\",\n    environment: {\n      TABLE_NAME: table.tableName,\n    },\n    permissions: [table, \"dynamodb\"],\n  });\n\n  const bus = new EventBus(stack, \"order\", {\n    rules: {\n      order: {\n        pattern: {\n          source: [EVENT_SOURCE.order],\n          detailType: [EVENT_DETAIL_TYPE.order],\n        },\n        targets: {\n          processOrder: \"functions/processOrder.handler\",\n          sendReceipt: \"functions/sendReceipt.handler\",\n        },\n      },\n    },\n  });\n\n  bus.attachPermissions([\"dynamodb\"]);\n\n  const lambda = new Api(stack, \"api\", {\n    defaults: {\n      function: {\n        permissions: [table],\n        environment: {\n          busName: bus.eventBusName,\n          tableName: table.tableName,\n        },\n      },\n    },\n    routes: {\n      \"GET /\": \"functions/helloWorld.handler\",\n      \"POST /order-tickets\": \"functions/orderTickets.handler\",\n      \"POST /process\": \"functions/processOrder.handler\",\n    },\n  });\n\n  lambda.attachPermissions([bus, \"dynamodb\"]);\n\n  stack.addOutputs({\n    ApiEndpoint: lambda.url,\n  });\n}\n", "import { Lambda } from \"./Lambda\";\nimport { App } from \"@serverless-stack/resources\";\n\nexport default function (app: App) {\n  app.setDefaultFunctionProps({\n    runtime: \"nodejs16.x\",\n    srcPath: \"services\",\n    bundle: {\n      format: \"esm\",\n    },\n  });\n  app.stack(Lambda);\n}\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASO,gBAAgB,EAAE,SAAuB;AAC9C,QAAM,QAAQ,IAAI,MAAM,OAAO,UAAU;AAAA,IACvC,QAAQ;AAAA,MACN,YAAY;AAAA,IACd;AAAA,IACA,cAAc,EAAE,cAAc,aAAa;AAAA,IAC3C,QAAQ;AAAA,IACR,WAAW;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,EACF,CAAC;AAED,UAAQ,IAAI,cAAc,MAAM,SAAS;AAEzC,MAAI,SAAS,OAAO,oBAAoB;AAAA,IACtC,SAAS;AAAA,IACT,aAAa;AAAA,MACX,YAAY,MAAM;AAAA,IACpB;AAAA,IACA,aAAa,CAAC,OAAO,UAAU;AAAA,EACjC,CAAC;AAED,QAAM,MAAM,IAAI,SAAS,OAAO,SAAS;AAAA,IACvC,OAAO;AAAA,MACL,OAAO;AAAA,QACL,SAAS;AAAA,UACP,QAAQ,CAAC,gDAAkB;AAAA,UAC3B,YAAY,CAAC,mBAAuB;AAAA,QACtC;AAAA,QACA,SAAS;AAAA,UACP,cAAc;AAAA,UACd,aAAa;AAAA,QACf;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAED,MAAI,kBAAkB,CAAC,UAAU,CAAC;AAElC,QAAM,SAAS,IAAI,IAAI,OAAO,OAAO;AAAA,IACnC,UAAU;AAAA,MACR,UAAU;AAAA,QACR,aAAa,CAAC,KAAK;AAAA,QACnB,aAAa;AAAA,UACX,SAAS,IAAI;AAAA,UACb,WAAW,MAAM;AAAA,QACnB;AAAA,MACF;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,SAAS;AAAA,MACT,uBAAuB;AAAA,MACvB,iBAAiB;AAAA,IACnB;AAAA,EACF,CAAC;AAED,SAAO,kBAAkB,CAAC,KAAK,UAAU,CAAC;AAE1C,QAAM,WAAW;AAAA,IACf,aAAa,OAAO;AAAA,EACtB,CAAC;AACH;AA7DgB;;;ACND,wBAAU,KAAU;AACjC,MAAI,wBAAwB;AAAA,IAC1B,SAAS;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,MACN,QAAQ;AAAA,IACV;AAAA,EACF,CAAC;AACD,MAAI,MAAM,MAAM;AAClB;AATO;",
  "names": []
}
